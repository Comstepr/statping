name: Development Build
on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**.md'

jobs:

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.15.x
      - uses: actions/setup-node@v1
        with:
          node-version: 12.18.2

      - name: Set Version
        run: |
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
        shell: bash

      - name: Install Global Dependencies
        run: npm install -g yarn sass cross-env mjml

      - name: Download Frontend Dependencies
        working-directory: ./frontend
        run: yarn

      - name: Download Go mods
        run: |
          go mod download
          go mod verify
          make test-deps

      - name: Build Frontend Statping
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
          MJML_APP: ${{ secrets.MJML_APP }}
          MJML_PRIVATE: ${{ secrets.MJML_PRIVATE }}
        run: make clean generate compile

      - name: Upload Compiled Frontend (rice-box.go)
        uses: actions/upload-artifact@v1
        with:
          name: static-rice-box
          path: ./source


  build:
    needs: frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux]
        arch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v2

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source


      - name: Add GOBIN to PATH
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
        shell: bash

      - name: Set Linux Build Flags
        if: matrix.platform == 'linux'
        run: |
          echo "BUILD_FLAGS=-extldflags -static" >> $GITHUB_ENV
          echo "XGO_TAGS=netgo osusergo linux sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash

      - name: Set Darwin Build Flags
        if: matrix.platform == 'darwin'
        run: echo "XGO_TAGS=netgo osusergo darwin sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash

      - name: Set Windows Build Flags
        if: matrix.platform == 'windows'
        run: |
          echo "BUILD_FLAGS=-extldflags -static" >> $GITHUB_ENV
          echo "XGO_TAGS=netgo osusergo sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash

      - name: Build ${{ matrix.platform }}/${{ matrix.arch }}
        uses: crazy-max/ghaction-xgo@v1
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        with:
          xgo_version: latest
          go_version: 1.15.x
          dest: build
          prefix: statping
          targets: ${{ matrix.platform }}/${{ matrix.arch }}
          v: false
          x: false
          pkg: cmd
          buildmode: pie
          tags: ${{ env.XGO_TAGS }}
          ldflags: -s -w -X main.VERSION=${{ env.VERSION }} -X main.COMMIT=${{ env.COMMIT }} ${{ env.BUILD_FLAGS }}

      - name: Compress Linux Builds
        if: matrix.platform == 'linux'
        run: |
          cd build
          mv statping-linux-${{ matrix.arch }} statping
          chmod +x statping
          tar -czvf statping-linux-${{ matrix.arch }}.tar.gz statping
          rm -rf statping
          echo "compressed=statping-linux-${{ matrix.arch }}.tar.gz" >> $GITHUB_ENV


      - name: Upload Compiled Statping Binary
        uses: actions/upload-artifact@v1
        with:
          name: statping-${{ matrix.platform }}-${{ matrix.arch }}
          path: ./build

      - name: Upload Releases
        id: upload-assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        with:
          tag_name: dev-v${{ env.VERSION }}
          draft: true
          prerelease: true
          files: build/${{ env.compressed }}


#  sentry-release:
#    needs: [test, test-postman-sqlite, test-postman-postgres, test-postman-mysql]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Statping Repo
#        uses: actions/checkout@v2
#
#      - name: Setup Sentry CLI
#        uses: mathrix-education/setup-sentry-cli@master
#        with:
#          version: latest
#          url: ${{ secrets.SENTRY_URL }}
#          token: ${{ secrets.SENTRY_AUTH_TOKEN }}
#          organization: statping
#
#      - name: Setting ENV's
#        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
#        shell: bash
#
#      - name: Sentry Release
#        run: make sentry-release
